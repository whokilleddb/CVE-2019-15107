#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <signal.h>
#include "../globals/variables.h"

// Print Colors
#define RED(string)     "\x1b[31m" string "\x1b[0m"
#define GREEN(string)   "\x1b[32m" string "\x1b[0m"
#define YELLOW(string)  "\x1b[33m" string "\x1b[0m"
#define BLUE(string)    "\x1b[34m" string "\x1b[0m"
#define MAGENTA(string) "\x1b[35m" string "\x1b[0m"
#define CYAN(string)    "\x1b[36m" string "\x1b[0m"

// Initialise Global Variables
static inline void INIT_SERVER(struct SERVER_FLAGS *SERVER, char *url)
{
  // Initialize Server Flags
  SERVER->VERSION_FLAG=0;
  SERVER->VULN_FLAG=0;
  SERVER->SSL_FLAG=0;

  // Initialize URL
  URL = (char *)malloc(strlen(url)+1);
  bzero(URL,strlen(url)+1);
  if (URL == NULL)
  {
    fprintf(stderr, "[-] "RED("malloc() Failed!" "\n"));
    exit(EXIT_FAILURE);
  }
  if (url[strlen(url)-1]=='/')
  {
    url[strlen(url)-1]='\0';
  }  
  strcpy(URL,url);
}

// Intialise Chunks
static inline void INIT_CHUNCK(struct chunck *s) 
{
  s->len = 0;
  s->ptr = malloc(s->len+1);
  if (s->ptr == NULL) 
  {
    fprintf(stderr, "[-] "RED("malloc() Failed!" "\n"));
    exit(EXIT_FAILURE);
  }
  s->ptr[0] = '\0';
}

// Check If Server Is Running In SSL Mode
static inline void CHECK_SSL_MODE(char *resp)
{
  if (strstr(resp,"server is running in SSL mode")!=NULL)
  {
    SERVER.SSL_FLAG=1;
  }
}

// Switch to HTTPS
static inline void SWITCH_TO_SSL()
{
  char temp[strlen(URL)+2];
  bzero(temp,strlen(URL)+2);
  if(strncmp(URL,"http://",7*sizeof(char))==0)
  {
    strcpy(temp+1,URL);
    memcpy(temp,URL,5*sizeof(char));
    temp[4]='s';
    
    URL=(char *)realloc(URL,strlen(temp)+1);
    memcpy(URL,temp,sizeof(temp));
  }
}

// Concar two strings
static inline char* CONCAT(const char *s1, const char *s2)
{
  char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
  // in real code you would check for errors in malloc here
  strcpy(result, s1);
  strcat(result, s2);
  return result;
}

// Cleanup after exploit
static inline void CLEANUP()
{
  if (URL != NULL)
  {
    free(URL);
  }
}

// Generate A Random String
static inline char *RAND_STR(size_t length) 
{ 
  static char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; // could be const
  char *randomString;
  if (length) 
  {
    randomString = malloc(length +1); // sizeof(char) == 1, cf. C99
    if (randomString) 
    {
      int l = (int) (sizeof(charset) -1); // (static/global, could be const or #define SZ, would be even better)
      int key;  // one-time instantiation (static/global would be even better)
      srand(time(0));
      for (int n = 0;n < length;n++) 
      {        
        key = rand() % l;   // no instantiation, just assignment, no overhead from sizeof
        randomString[n] = charset[key];
      }

      randomString[length] = '\0';
    }
  }
  return randomString;
}


// HANDLE SIGINT
static inline void SIGNINT_HANDLER(int dummy)
{
  fprintf(stderr,"\n[+] Received " RED("SIGINT")"\n");
  CLEANUP();
  exit(EXIT_FAILURE);
}

